/* eslint-disable react/no-unescaped-entities */
import * as React from "react";

import { cn } from "@/lib/utils";
import { useMediaQuery } from "@custom-react-hooks/use-media-query";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Filter, Forward, RotateCcw, X } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import { PAGE_SIZE_OPTIONS } from "@/components/Public/GlobalConst";
import SuffixClearInput from "@/components/Public/SuffixClearInput";
import { ScrollArea } from "@/components/ui/scroll-area";
import DatePickerV2 from "@/components/ui/date-picker-v2";
import { Switch } from "@/components/ui/switch";

type Props = {
  nama: string;
  show: number;
  createQueryString: any;
};

export const {{entityNameCap}}Filter: React.FC<Props> = ({ ...props }) => {
  const [open, setOpen] = React.useState(false);

  // Add keyboard shortcut functionality
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.ctrlKey && event.key === "\\") {
        setOpen((prevOpen) => !prevOpen); // Toggle open state
        event.preventDefault(); // Prevent any default behavior for Ctrl + \
      }
    };
    const handleKeyExit = (event: KeyboardEvent) => {
      if (event.key === "esc") {
        setOpen((prevOpen) => false); // set open state to false
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keydown", handleKeyExit);

    // Cleanup event listener on component unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keydown", handleKeyExit);
    };
  }, []);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{ {{entityNameCap}}UI.trigger}</DialogTrigger>
      <DialogContent className="sm:max-w-[40rem] sm:max-h-[40rem]">
        <DialogHeader>
          <DialogTitle>{ {{entityNameCap}}UI.title}</DialogTitle>
        </DialogHeader>
        <FilterForm {...props} setOpen={setOpen} />
      </DialogContent>
    </Dialog>
  );
};

const {{entityNameCap}}UI = {
  title: (
    <h1 className="flex items-center justify-center font-medium w-fit gap-2">
      <Filter className="w-6 h-6 text-primary" /> Filter
    </h1>
  ),
  trigger: (
    <Button variant="outline" className="">
      {" "}
      <Filter className="w-4 h-4" />
      Filter
    </Button>
  ),
};

const formSchema = z.object({
  {{#each fieldsFilter}}{{key}}: z.{{#if (eq type "Date")}}union([z.date(), z.string()]){{else}}string(){{/if}}.nullable().optional(),
  {{/each}}   
});

const FilterForm: React.FC<Props & { setOpen: any }> = ({
  nama,
  setOpen,
  show,
  createQueryString,
}) => {
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const { push } = useRouter();
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      {{#each fieldsFilter}}
      {{key}}: "{{#if (eq type "boolean")}}-{{else if (eq key "page")}}1{{else if (eq key "limit")}}10{{/if}}",
      {{/each}}  
    },
  });
  {{#each fieldsFilter}}
  const {{key}}_q = searchParams.get("{{key}}") || "{{#if (eq type "boolean")}}-{{else if (eq key "page")}}1{{else if (eq key "limit")}}10{{/if}}";
  {{/each}}   

  React.useEffect(() => {
    form.reset({
      {{#each fieldsFilter}}
      {{key}}: {{key}}_q{{#if (eq type "boolean")}}== "-" ? "":{{key}}_q{{/if}},
      {{/each}}  
    });
    form.trigger();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    {{#each fieldsFilter}}
    {{key}}_q,
    {{/each}} 
  ]);

  console.log(form.getValues());

  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values);
    push(
      `${pathname}?${createQueryString({
        {{#each fieldsFilter}}
        {{key}}: values.{{key}}{{#if (eq type "boolean")}}== "-" ? "" : values.{{key}}{{/if}},
        {{/each}}  
      })}`,
      {
        scroll: false,
      }
    );
    setOpen(false);
  }
  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className={cn("grid items-start gap-4")}
      >
        <ScrollArea className="h-[22rem] md:h-[30rem]">
          <div className="w-auto h-full flex flex-col gap-4 p-2 pr-3">
            {{#each fieldsFilter}}
            {{#if (eq type "boolean")}}<React.Suspense
              key={
                form.getValues("{{key}}") + ({{key}}_q as string)
              }>{{/if}}
            {{#if (eq key "page")}}{{else if (eq key "limit")}}{{else}}
            <FormField
              control={form.control}
              name="{{key}}"
              render={({ field }) => (
                <FormItem>
                  <FormLabel required={false} className="capitalize">{{kebabToCamel key}}</FormLabel>
                  <FormControl>
                    {{#if (eq type "boolean")}}
                     <Select
                        defaultValue={(field.value as string) || "-"}
                        value={field.value as string}
                        onValueChange={field.onChange}
                      >
                        <SelectTrigger className="w-[50px] px-2 bg-white font-medium py-2">
                          <SelectValue placeholder="All" />
                        </SelectTrigger>
                        <SelectContent className="min-w-[50px]">
                          <SelectGroup>
                            <SelectItem value={`-`}>all</SelectItem>
                            <SelectItem value={`true`}>{{key}}</SelectItem>
                            <SelectItem value={`false`}>un{{key}}</SelectItem>
                          </SelectGroup>
                        </SelectContent>
                      </Select>
                    {{else if (eq type "Date")}}<DatePickerV2
                      {...field}
                      placeholder="Enter {{kebabToCamel key}} here"
                      isDeletable
                      onChange={(date) => field.onChange(date)}
                    />{{else}}
                    <Input
                      {...field}
                      suffix={
                        <SuffixClearInput
                          condition={(field.value?.length as number) > 0}
                          onClick={() => field.onChange("")}
                        />
                      }
                      placeholder="Enter {{kebabToCamel key}} here"
                    />
                  {{/if}}</FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {{/if}}{{#if (eq type "boolean")}}</React.Suspense>
            {{/if}}{{/each}}  

            <React.Suspense key={show}>
              <FormField
                control={form.control}
                name="limit"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel required={false}>Show Data</FormLabel>
                    <FormControl>
                      <Select
                        defaultValue={show.toString()}
                        value={field.value as string}
                        onValueChange={field.onChange}
                      >
                        <SelectTrigger className="w-[50px] px-2 bg-white font-medium py-2">
                          <SelectValue placeholder="10 data" />
                        </SelectTrigger>
                        <SelectContent className="min-w-[50px]">
                          <SelectGroup>
                            {PAGE_SIZE_OPTIONS.map((pageSize) => (
                              <SelectItem key={pageSize} value={`${pageSize}`}>
                                {pageSize} data
                              </SelectItem>
                            ))}
                          </SelectGroup>
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </React.Suspense>
          </div>
        </ScrollArea>
        <div className="flex max-md:flex-col-reverse gap-2 justify-end mb-4 mx-auto">
          <Button
            variant={"outline"}
            type="button"
            className="w-full md:w-fit gap-1 px-4"
            size={"md"}
            onClick={() => setOpen(false)}
          >
            <X className="h-4 w-4" strokeWidth={1.5} />
            Batal
          </Button>
          <Button
            variant={"secondary"}
            type="button"
            className="w-full md:w-fit gap-1 px-4"
            size={"md"}
            onClick={() =>
              form.reset({
                 {{#each fieldsFilter}}
                 {{key}}: "{{#if (eq type "boolean")}}-{{else if (eq key "page")}}1{{else if (eq key "limit")}}10{{/if}}",
                 {{/each}}  
              })
            }
          >
            <RotateCcw className="h-4 w-4" strokeWidth={1.5} />
            Reset
          </Button>
          <Button
            variant={"default"}
            type="submit"
            className="w-full md:w-fit gap-1 px-4"
            size={"md"}
          >
            <Forward className="h-4 w-4" strokeWidth={1.5} />
            Find
          </Button>
        </div>
      </form>
    </Form>
  );
};
